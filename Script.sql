---------------------------------------
-- PREP AND CLEANING
---------------------------------------

-- CREATED A NEW TABLE WITH APPROPRIATE DATA TYPES
CREATE TABLE CYCLISTIC_2023_BIKESHARE_DATA (
	RIDE_ID VARCHAR(20),
	RIDEABLE_TYPE VARCHAR(20),
	STARTED_AT TIMESTAMP,
	ENDED_AT TIMESTAMP,
	START_STATION_NAME VARCHAR(100),
	START_STATION_ID VARCHAR(50),
	END_STATION_NAME VARCHAR(100),
	END_STATION_ID VARCHAR(50),
	START_LAT FLOAT8, 
	START_LNG FLOAT8,
	END_LAT FLOAT8,
	END_LNG FLOAT8, 
	MEMBER_CASUAL VARCHAR(20)
);


-- MERGED LAST 12 MONTHS OF DATA INTO THE NEW TABLE
INSERT INTO CYCLISTIC_2023_BIKESHARE_DATA 
SELECT * FROM "202212_DIVVY_TRIPDATA" 
UNION ALL
SELECT * FROM "202301_DIVVY_TRIPDATA"
UNION ALL
SELECT * FROM "202302_DIVVY_TRIPDATA"
UNION ALL
SELECT * FROM "202303_DIVVY_TRIPDATA"
UNION ALL
SELECT * FROM "202304_DIVVY_TRIPDATA"
UNION ALL
SELECT * FROM "202305_DIVVY_TRIPDATA"
UNION ALL
SELECT * FROM "202306_DIVVY_TRIPDATA"
UNION ALL
SELECT * FROM "202307_DIVVY_TRIPDATA"
UNION ALL
SELECT * FROM "202308_DIVVY_TRIPDATA"
UNION ALL
SELECT * FROM "202309_DIVVY_TRIPDATA"
UNION ALL
SELECT * FROM "202310_DIVVY_TRIPDATA"
UNION ALL
SELECT * FROM "202311_DIVVY_TRIPDATA";


-- DELETED COLUNMS (START_STATION_ID AND END_STATION_ID)
ALTER TABLE CYCLISTIC_2023_BIKESHARE_DATA 
DROP COLUMN START_STATION_ID,
DROP COLUMN END_STATION_ID;


-- CHECKED RECORDS FOR DUPLICATE RECORDS
SELECT RIDE_ID, COUNT(*)AS DUPLICATES
FROM CYCLISTIC_2023_BIKESHARE_DATA CBD
GROUP BY RIDE_ID
HAVING COUNT(*)>1


-- CHECKED RECORDS FOR NULL VALUES 
SELECT *
FROM CYCLISTIC_2023_BIKESHARE_DATA CBD 
WHERE RIDE_ID  IS NULL
	OR RIDEABLE_TYPE  IS NULL
	OR STARTED_AT  IS NULL
	OR ENDED_AT  IS NULL
	OR START_STATION_NAME  IS NULL
	OR END_STATION_NAME  IS NULL
	OR MEMBER_CASUAL  IS NULL;


-- CHECKED RECORDS FOR EMPTY VALUES 
SELECT COUNT(*)
FROM CYCLISTIC_2023_BIKESHARE_DATA CBD
WHERE START_STATION_NAME  =''
	OR END_STATION_NAME ='';


-- REMOVED RECORDS WITH EMPTY VALUES
DELETE FROM CYCLISTIC_2023_BIKESHARE_DATA CBD
WHERE START_STATION_NAME  =''
	OR END_STATION_NAME ='';


-- CHECKED UNIQUE VALUES TO FIND INCONCICTENCIES
SELECT DISTINCT RIDEABLE_TYPE  FROM CYCLISTIC_2023_BIKESHARE_DATA CBD;
SELECT DISTINCT MEMBER_CASUAL FROM CYCLISTIC_2023_BIKESHARE_DATA CBD;

SELECT
	COUNT(DISTINCT START_STATION_NAME)
	COUNT(DISTINCT END_STATION_NAME)
FROM CYCLISTIC_2023_BIKESHARE_DATA CBD;


-- DELETED 262 RECORDS WHERE RIDE END TIME WAS LESS THAN THE START TIME
DELETE FROM CYCLISTIC_2023_BIKESHARE_DATA CBD
WHERE STARTED_AT  > ENDED_AT;


-- CHECKED FOR OUTLIERS IN THE START TIME AND END TIME
SELECT ENDED_AT FROM CYCLISTIC_2023_BIKESHARE_DATA CBD ORDER BY ENDED_AT;
SELECT ENDED_AT FROM CYCLISTIC_2023_BIKESHARE_DATA CBD ORDER BY ENDED_AT DESC;
SELECT STARTED_AT FROM CYCLISTIC_2023_BIKESHARE_DATA CBD ORDER BY STARTED_AT;
SELECT STARTED_AT FROM CYCLISTIC_2023_BIKESHARE_DATA CBD ORDER BY STARTED_AT DESC;


-- ADDING RIDE LENGTH COLUNM
ALTER TABLE CYCLISTIC_2023_BIKESHARE_DATA 
ADD RIDE_LENGTH INTERVAL;


-- CALCULATING RIDE LENGTH
UPDATE CYCLISTIC_2023_BIKESHARE_DATA 
SET RIDE_LENGTH = ENDED_AT-STARTED_AT;


-- DELETED 87,141 ROWS WHERE RIDE DURATION WAS LESS THAN 60 SECONDS
DELETE FROM CYCLISTIC_2023_BIKESHARE_DATA
WHERE EXTRACT(EPOCH FROM RIDE_LENGTH) < 60;


---------------------------------------
-- ANALYSIS
---------------------------------------
   
   
-- FIND TOTAL AVERAGE RIDE LENGTH AND AVERAGE RIDE LENGTH FOR CASUAL AND ANNUAL MEMBERS
SELECT  AVG(RIDE_LENGTH) AS TOTAL_AVERAGE,
	(SELECT AVG(RIDE_LENGTH) FROM CYCLISTIC_2023_BIKESHARE_DATA CBD WHERE MEMBER_CASUAL ='CASUAL') AS CASUAL_MEMBER_AVERAGE,
	(SELECT AVG(RIDE_LENGTH) FROM CYCLISTIC_2023_BIKESHARE_DATA CBD WHERE MEMBER_CASUAL ='MEMBER') AS ANNUAL_MMBER_AVERAGE
FROM CYCLISTIC_2023_BIKESHARE_DATA CBD;


-- FIND MEMBER DISTRIBUTION
SELECT 
    MEMBER_CASUAL , 
    COUNT(*) AS TOTAL_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS PERCENTAGE
FROM CYCLISTIC_2023_BIKESHARE_DATA
GROUP BY MEMBER_CASUAL 
ORDER BY TOTAL_COUNT DESC;


-- FIND RIDE TYPE DISTRIBUTION
SELECT 
    RIDEABLE_TYPE, 
    COUNT(*) AS TOTAL_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS PERCENTAGE
FROM CYCLISTIC_2023_BIKESHARE_DATA
GROUP BY RIDEABLE_TYPE
ORDER BY TOTAL_COUNT DESC;
   
   
-- FIND RIDE TYPE DISTRIBUTION FOR EACH CASUAL AND ANNUAL MEMBERS
SELECT
  RIDEABLE_TYPE,
  COUNT(CASE WHEN MEMBER_CASUAL = 'CASUAL' THEN 1 END) AS CASUAL_MEMBER,
  COUNT(CASE WHEN MEMBER_CASUAL = 'MEMBER' THEN 1 END) AS ANNUAL_MEMBER
FROM CYCLISTIC_2023_BIKESHARE_DATA
GROUP BY RIDEABLE_TYPE;
 
-- FIND TIME OF HIGHEST USAGE FOR CASUAL AND ANNUAL MEMBERS
SELECT
  EXTRACT(HOUR FROM STARTED_AT) AS HOUR_OF_DAY,
  COUNT(CASE WHEN MEMBER_CASUAL = 'CASUAL' THEN 1 END) AS CASUAL_COUNT,
  COUNT(CASE WHEN MEMBER_CASUAL = 'MEMBER' THEN 1 END) AS MEMBER_COUNT
FROM CYCLISTIC_2023_BIKESHARE_DATA
GROUP BY HOUR_OF_DAY
ORDER BY MEMBER_COUNT DESC;

 
-- FIND MONTH OF HIGHEST USAGE FOR CASUAL AND ANNUAL MEMBERS
SELECT
  TO_CHAR(STARTED_AT, 'MONTH') AS MONTH_OF_YEAR,
  COUNT(CASE WHEN MEMBER_CASUAL = 'CASUAL' THEN 1 END) AS CASUAL_COUNT,
  COUNT(CASE WHEN MEMBER_CASUAL = 'MEMBER' THEN 1 END) AS MEMBER_COUNT
FROM CYCLISTIC_2023_BIKESHARE_DATA
GROUP BY MONTH_OF_YEAR
ORDER BY MEMBER_COUNT DESC;

 
-- FIND BUSIEST STATIONS
SELECT START_STATION_NAME, COUNT(*) AS TOTAL_RIDES
FROM CYCLISTIC_2023_BIKESHARE_DATA CBD
GROUP BY START_STATION_NAME
ORDER BY TOTAL_RIDES DESC
LIMIT 10;
